1. Revise Hibernate Session API : get vs load

What will happen ?
In the IPL scenario :
1.1 session.get(Player.class,playerId) 
tx.commit();
valid id : persistent Player --> detached -> no exc 
invalid id : null

1.2 Player player=session.load(Player.class,playerId) --> un inited proxy
tx.commit();
sop(player);
valid id : LazyInitExc
invalid id : LazyInitExc

1.3 Player player=session.load(Player.class,playerId) : un inited proxy
player.getName();//simply invoke non id getter , within session scope --select
//player : inited proxy
tx.commit();
sop(player);
valid id : no exc
invalid id : ObjectNotFoundException
Use case : assigning adr to emp !


2. Revise one-one , uni dir association , using shared PK approach, between 

Owner 1<--->1Team

Bi dir 
Owner : one , parent , inverse
Team : one , child, owning 

Owner POJO
.....+
@OneToOne(mappedBy="teamOwner",cascade=CascadeType.ALL,orphanRemoval=true,fetch=FetchType.LAZY)
private Team myTeam;

Team : 
....
+
@OneToOne
@JoinColumn(name="owner_id",nullable=false)
private Owner teamOwner;



Are there any dis advantages of above mapping ????
Objective : Get  owner details by it's email
Which details : owner n team 

1. Even after specifying fetch type =LAZY , hibenrate will still fetch data :
teams n owners

2. Keys : owners : owner_id : PK
teams : team_id : PK , owner_id : FK

Uni dir (Owner 1<----1 Team), shared PK approach : 

Owner POJO
...

Team : 
....
+
@OneToOne
@JoinColumn(name="owner_id",nullable=false)
@MapsId 
private Owner teamOwner;
-----------------------------



uni dir , shared PK approach, between Owner --- Team

Owner : 
Team : 

Owner POJO :
id , name , email.....


Team POJO 
id , name , abbr.....
+
????

3. Enter Spring
